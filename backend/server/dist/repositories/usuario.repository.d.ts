import { PrismaService } from 'src/base/relacional/PrismaService';
export declare class UsuarioRepository {
    private prisma;
    constructor(prisma: PrismaService);
    findOne(username: string): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    getUsuariaClienteAgendamento(empresa_configId: any): Promise<{
        id: number;
        nome: string;
    }[]>;
    getUserAll(empresa_configId: any): Promise<({
        permissao_modulos: ({
            modulo: {
                subModulo: {
                    id: number;
                    permissao_sub_modulos: {
                        ver: boolean;
                        editar: boolean;
                        deletar: boolean;
                    }[];
                }[];
            } & {
                id: number;
                created_at: Date;
                updated_at: Date;
                nome: string;
                ativo: boolean;
                url: string;
                ordem: number;
                icon: string;
            };
        } & {
            id: number;
            created_at: Date;
            updated_at: Date;
            userId: number;
            ver: boolean;
            moduloId: number;
        })[];
    } & {
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    })[]>;
    getByIdUser(id: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    getByEmailUser(email: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    createUser(empresa_configId: any, data: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    updateUser(id: any, data: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    deleteUser(id: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    findUnique(email: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    update(data: any): Promise<{
        id: number;
        created_at: Date;
        updated_at: Date;
        nome: string;
        sobrenome: string;
        empresa: string;
        cpf: string;
        telefone: string;
        linkFoto: string;
        isAdmin: boolean;
        themeDark: boolean;
        operador: string;
        sexoId: number;
        email: string;
        profile: string;
        last_login: Date;
        verifiedAt: Date;
        timesId: number;
        cep: string;
        logradouro: string;
        bairro: string;
        estado: string;
        cidade: string;
        pais: string;
        complemento: string;
        numero: string;
        primeiro_acesso: boolean;
        gerente_conta: boolean;
        termos: boolean;
        password: string;
        empresa_configId: number;
        tipoUsuarioId: number;
    }>;
    resetPasswordFindUnique(data: any): Promise<{
        id: string;
        email: string;
        token: string;
        createdAt: Date;
        expireIn: Date;
    }>;
    createResetPassword(data: any): Promise<{
        id: string;
        email: string;
        token: string;
        createdAt: Date;
        expireIn: Date;
    }>;
    deleteResetPassword(data: any): Promise<{
        id: string;
        email: string;
        token: string;
        createdAt: Date;
        expireIn: Date;
    }>;
    emailVerificationCreate(data: any): Promise<{
        id: string;
        email: string;
        code: string;
        createdAt: Date;
    }>;
    findVerificationCreate(email: any): Promise<{
        id: string;
        email: string;
        code: string;
        createdAt: Date;
    }>;
    findVerificationCreateCode(code: any): Promise<{
        id: string;
        email: string;
        code: string;
        createdAt: Date;
    }>;
    deletVficationCreate(email: any): Promise<{
        id: string;
        email: string;
        code: string;
        createdAt: Date;
    }>;
}
