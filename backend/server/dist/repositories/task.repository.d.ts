import { PrismaService } from 'src/base/relacional/PrismaService';
export declare class TaskRepository {
    private prisma;
    constructor(prisma: PrismaService);
    getTaskAll(): Promise<{
        id: string;
        title: string;
        description: string;
        status: string;
        created_at: Date;
        updated_at: Date;
        empresa: string;
        cpf: string;
        operador: string;
        metasId: number;
        valor_Inicial: import("@prisma/client/runtime/library").Decimal;
        valor_Final: import("@prisma/client/runtime/library").Decimal;
        desconto: import("@prisma/client/runtime/library").Decimal;
        emailId: number;
        anotacoesId: number;
        contactsId: number;
        usersId: number;
        vendaId: number;
        motivosId: number;
        produtoId: number;
        contato_nome: string;
        contato_numero: string;
        processoId: string;
        marcar_venda: boolean;
        previsao_fechamento: Date;
        arquivado: boolean;
    }[]>;
    getVisaoGeralTask(filter: any): Promise<{
        id: string;
        title: string;
        description: string;
        status: string;
        created_at: Date;
        updated_at: Date;
        empresa: string;
        cpf: string;
        operador: string;
        metasId: number;
        valor_Inicial: import("@prisma/client/runtime/library").Decimal;
        valor_Final: import("@prisma/client/runtime/library").Decimal;
        desconto: import("@prisma/client/runtime/library").Decimal;
        emailId: number;
        anotacoesId: number;
        contactsId: number;
        usersId: number;
        vendaId: number;
        motivosId: number;
        produtoId: number;
        contato_nome: string;
        contato_numero: string;
        processoId: string;
        marcar_venda: boolean;
        previsao_fechamento: Date;
        arquivado: boolean;
    }[]>;
    countTasksByEmpresa(empresa_configId: any): Promise<number>;
    sumTasksByEmpresaValorInicial(empresa_configId: any): Promise<0 | import("@prisma/client/runtime/library").Decimal>;
    sumTasksByEmpresaValorFinal(empresa_configId: any): Promise<0 | import("@prisma/client/runtime/library").Decimal>;
    getByIdTask(id: any): Promise<{
        Users: {
            id: number;
            created_at: Date;
            updated_at: Date;
            nome: string;
            sobrenome: string;
            empresa: string;
            cpf: string;
            telefone: string;
            linkFoto: string;
            isAdmin: boolean;
            themeDark: boolean;
            operador: string;
            sexoId: number;
            email: string;
            profile: string;
            last_login: Date;
            verifiedAt: Date;
            timesId: number;
            cep: string;
            logradouro: string;
            bairro: string;
            estado: string;
            cidade: string;
            pais: string;
            complemento: string;
            numero: string;
            primeiro_acesso: boolean;
            gerente_conta: boolean;
            termos: boolean;
            password: string;
            empresa_configId: number;
            tipoUsuarioId: number;
        };
        Contacts: {
            number: string;
            id: number;
            created_at: Date;
            updated_at: Date;
            name: string;
            email: string;
            cep: string;
            logradouro: string;
            bairro: string;
            estado: string;
            cidade: string;
            pais: string;
            complemento: string;
            numero: string;
            empresa_configId: number;
            profilePicUrl: string;
        };
        arquivos: {
            id: number;
            description: string;
            created_at: Date;
            updated_at: Date;
            taskId: string;
            link: string;
            empresa_configId: number;
            messagesMessage_id: number;
        }[];
        processo: {
            title: string;
            projeto: {
                id: string;
                title: string;
                created_at: Date;
                updated_at: Date;
                operador: string;
                empresa_configId: number;
                tipo_projetoId: number;
            };
        };
        anotacoes: {
            id: number;
            title: string;
            description: string;
            created_at: Date;
            updated_at: Date;
            taskId: string;
            date: Date;
            is_fav: boolean;
            tag: string;
        }[];
    } & {
        id: string;
        title: string;
        description: string;
        status: string;
        created_at: Date;
        updated_at: Date;
        empresa: string;
        cpf: string;
        operador: string;
        metasId: number;
        valor_Inicial: import("@prisma/client/runtime/library").Decimal;
        valor_Final: import("@prisma/client/runtime/library").Decimal;
        desconto: import("@prisma/client/runtime/library").Decimal;
        emailId: number;
        anotacoesId: number;
        contactsId: number;
        usersId: number;
        vendaId: number;
        motivosId: number;
        produtoId: number;
        contato_nome: string;
        contato_numero: string;
        processoId: string;
        marcar_venda: boolean;
        previsao_fechamento: Date;
        arquivado: boolean;
    }>;
    createTask(data: any): Promise<{
        processo: {
            projeto: {
                id: string;
            };
        };
    } & {
        id: string;
        title: string;
        description: string;
        status: string;
        created_at: Date;
        updated_at: Date;
        empresa: string;
        cpf: string;
        operador: string;
        metasId: number;
        valor_Inicial: import("@prisma/client/runtime/library").Decimal;
        valor_Final: import("@prisma/client/runtime/library").Decimal;
        desconto: import("@prisma/client/runtime/library").Decimal;
        emailId: number;
        anotacoesId: number;
        contactsId: number;
        usersId: number;
        vendaId: number;
        motivosId: number;
        produtoId: number;
        contato_nome: string;
        contato_numero: string;
        processoId: string;
        marcar_venda: boolean;
        previsao_fechamento: Date;
        arquivado: boolean;
    }>;
    updateTask(id: any, data: any): Promise<{
        id: string;
        title: string;
        description: string;
        status: string;
        created_at: Date;
        updated_at: Date;
        empresa: string;
        cpf: string;
        operador: string;
        metasId: number;
        valor_Inicial: import("@prisma/client/runtime/library").Decimal;
        valor_Final: import("@prisma/client/runtime/library").Decimal;
        desconto: import("@prisma/client/runtime/library").Decimal;
        emailId: number;
        anotacoesId: number;
        contactsId: number;
        usersId: number;
        vendaId: number;
        motivosId: number;
        produtoId: number;
        contato_nome: string;
        contato_numero: string;
        processoId: string;
        marcar_venda: boolean;
        previsao_fechamento: Date;
        arquivado: boolean;
    }>;
    deleteTask(id: any): Promise<{
        id: string;
        title: string;
        description: string;
        status: string;
        created_at: Date;
        updated_at: Date;
        empresa: string;
        cpf: string;
        operador: string;
        metasId: number;
        valor_Inicial: import("@prisma/client/runtime/library").Decimal;
        valor_Final: import("@prisma/client/runtime/library").Decimal;
        desconto: import("@prisma/client/runtime/library").Decimal;
        emailId: number;
        anotacoesId: number;
        contactsId: number;
        usersId: number;
        vendaId: number;
        motivosId: number;
        produtoId: number;
        contato_nome: string;
        contato_numero: string;
        processoId: string;
        marcar_venda: boolean;
        previsao_fechamento: Date;
        arquivado: boolean;
    }>;
    createManyTask(data: any): Promise<import(".prisma/client").Prisma.BatchPayload>;
    deleteManyTaskProcesso(id: any): Promise<import(".prisma/client").Prisma.BatchPayload>;
}
